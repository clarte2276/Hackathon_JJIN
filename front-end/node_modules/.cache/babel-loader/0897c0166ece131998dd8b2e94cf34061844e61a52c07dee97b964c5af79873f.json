{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAC00\\uC5F0\\\\Desktop\\\\Hackathon_real\\\\Hackathon_JJIN\\\\front-end\\\\src\\\\components\\\\chat\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./Chatbot.css\";\nimport chatbotImg from \"../images/chatbotImg.png\";\nimport sendBtn from \"../images/sendBtn.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io();\nconst aiuser = \"내꿈코\";\nconst Chatbot = ({\n  currentUser\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    socket.emit(\"join room\", {\n      user: currentUser\n    });\n    socket.on(\"init messages\", msgs => {\n      setMessages(msgs);\n      scrollToBottom();\n    });\n    socket.on(\"chat message\", msg => {\n      console.log(\"Received message: \", msg);\n      setMessages(prevMessages => [...prevMessages, msg]);\n    });\n    socket.on(\"gpt response\", msg => {\n      console.log(\"Received GPT response: \", msg);\n      setMessages(prevMessages => [...prevMessages, msg]);\n    });\n    return () => {\n      socket.off(\"chat message\");\n      socket.off(\"init messages\");\n      socket.off(\"gpt response\");\n    };\n  }, [currentUser]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (input) {\n      // 사용자 메시지 전송\n      socket.emit(\"chat message\", {\n        text: input,\n        user: currentUser\n      });\n      try {\n        const response = await fetch(\"/ask-gpt4\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            input\n          })\n        });\n        const data = await response.json();\n        console.log(\"Server response: \", data);\n\n        // GPT 응답을 내꿈코로 전송\n        socket.emit(\"gpt response\", {\n          text: data.response,\n          user: aiuser\n        });\n        setInput(\"\");\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n  };\n  const handleButtonClick = (label, text) => {\n    socket.emit(\"chat message\", {\n      text,\n      user: currentUser\n    });\n    socket.emit(\"ask chatbot\", {\n      label\n    });\n  };\n  const handleSeatsButtonClick = async () => {\n    const userText = \"현재 예약 가능한 좌석 현황을 알려주라\";\n    // 사용자 메시지 전송\n    socket.emit(\"chat message\", {\n      text: userText,\n      user: currentUser\n    });\n    try {\n      const response = await fetch(\"/api/empty\");\n      const data = await response.json();\n      const availableSeats = data.availableSeats; // 수정된 부분\n      const text = `현재 예약 가능한 좌석은 ${availableSeats}개입니다.`;\n      // 내꿈코 메시지로 전송\n      socket.emit(\"gpt response\", {\n        text,\n        user: aiuser\n      });\n    } catch (error) {\n      console.error(\"Error fetching empty seats:\", error);\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container-unique\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-bot-intro-unique\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: chatbotImg,\n        alt: \"chatBotprofile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC548\\uB155\\uD558\\uC138\\uC694! \\uB3D9\\uAD6D\\uB300\\uD559\\uAD50 \\uAFC8\\uC758 \\uC694\\uC815 \\uB0B4\\uAFC8\\uCF54\\uC608\\uC6A9~!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), \"\\uBE48\\uBC31 \\uC0AC\\uC6A9\\uBC95 \\uBC0F \\uC815\\uBCF4 \\uB4F1\\uC5D0 \\uB300\\uD574\\uC11C \\uAD81\\uAE08\\uD55C \\uB0B4\\uC6A9\\uC744 \\uC9C8\\uBB38\\uD558\\uBA74 \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9B4\\uAC8C\\uC694!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-chat-messages-unique\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"chatbot-messages-unique\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: msg.user === aiuser ? \"chatbot-message-left-unique\" : \"chatbot-message-right-unique\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              className: msg.user === aiuser ? \"nickname\" : \"\",\n              children: [msg.user, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this), \" \", msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-button-group-unique\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(\"TEXT 1\", \"나의 공강을 책임질 빈백의 위치를 알려줘!\"),\n        children: \"\\uB098\\uC758 \\uACF5\\uAC15\\uC744 \\uCC45\\uC784\\uC9C8 \\uBE48\\uBC31\\uC758 \\uC704\\uCE58\\uB97C \\uC54C\\uB824\\uC918!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(\"TEXT 2\", \"빈백 운영시간은 어떻게 돼?\"),\n        children: \"\\uBE48\\uBC31 \\uC6B4\\uC601\\uC2DC\\uAC04\\uC740 \\uC5B4\\uB5BB\\uAC8C \\uB3FC?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(\"TEXT 3\", \"나의 완벽한 숙면을 위해 음악을 추천해줄래?\"),\n        children: \"\\uB098\\uC758 \\uC644\\uBCBD\\uD55C \\uC219\\uBA74\\uC744 \\uC704\\uD574 \\uC74C\\uC545\\uC744 \\uCD94\\uCC9C\\uD574\\uC904\\uB798?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSeatsButtonClick,\n        children: \"\\uD604\\uC7AC \\uC608\\uC57D \\uAC00\\uB2A5\\uD55C \\uC88C\\uC11D \\uD604\\uD669\\uC744 \\uC54C\\uB824\\uC8FC\\uB77C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"chatbot-chatform-unique\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"chatbot-messageinput-unique\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sendBtn\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendBtn,\n              alt: \"\\uC804\\uC1A1 \\uC544\\uC774\\uCF58\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"ABrHAQDP7g0qYpnOwslR1WwKacs=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","chatbotImg","sendBtn","jsxDEV","_jsxDEV","socket","aiuser","Chatbot","currentUser","_s","messages","setMessages","input","setInput","messagesEndRef","emit","user","on","msgs","scrollToBottom","msg","console","log","prevMessages","off","handleSubmit","e","preventDefault","text","response","fetch","method","headers","body","JSON","stringify","data","json","error","handleButtonClick","label","handleSeatsButtonClick","userText","availableSeats","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","map","index","ref","onClick","onSubmit","value","onChange","target","autoComplete","type","_c","$RefreshReg$"],"sources":["C:/Users/가연/Desktop/Hackathon_real/Hackathon_JJIN/front-end/src/components/chat/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./Chatbot.css\";\r\nimport chatbotImg from \"../images/chatbotImg.png\";\r\nimport sendBtn from \"../images/sendBtn.png\";\r\n\r\nconst socket = io();\r\nconst aiuser = \"내꿈코\";\r\n\r\nconst Chatbot = ({ currentUser }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"join room\", { user: currentUser });\r\n\r\n    socket.on(\"init messages\", (msgs) => {\r\n      setMessages(msgs);\r\n      scrollToBottom();\r\n    });\r\n\r\n    socket.on(\"chat message\", (msg) => {\r\n      console.log(\"Received message: \", msg);\r\n      setMessages((prevMessages) => [...prevMessages, msg]);\r\n    });\r\n\r\n    socket.on(\"gpt response\", (msg) => {\r\n      console.log(\"Received GPT response: \", msg);\r\n      setMessages((prevMessages) => [...prevMessages, msg]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"chat message\");\r\n      socket.off(\"init messages\");\r\n      socket.off(\"gpt response\");\r\n    };\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (input) {\r\n      // 사용자 메시지 전송\r\n      socket.emit(\"chat message\", { text: input, user: currentUser });\r\n\r\n      try {\r\n        const response = await fetch(\"/ask-gpt4\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ input }),\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Server response: \", data);\r\n\r\n        // GPT 응답을 내꿈코로 전송\r\n        socket.emit(\"gpt response\", {\r\n          text: data.response,\r\n          user: aiuser,\r\n        });\r\n\r\n        setInput(\"\");\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (label, text) => {\r\n    socket.emit(\"chat message\", { text, user: currentUser });\r\n    socket.emit(\"ask chatbot\", { label });\r\n  };\r\n\r\n  const handleSeatsButtonClick = async () => {\r\n    const userText = \"현재 예약 가능한 좌석 현황을 알려주라\";\r\n    // 사용자 메시지 전송\r\n    socket.emit(\"chat message\", { text: userText, user: currentUser });\r\n\r\n    try {\r\n      const response = await fetch(\"/api/empty\");\r\n      const data = await response.json();\r\n      const availableSeats = data.availableSeats; // 수정된 부분\r\n      const text = `현재 예약 가능한 좌석은 ${availableSeats}개입니다.`;\r\n      // 내꿈코 메시지로 전송\r\n      socket.emit(\"gpt response\", { text, user: aiuser });\r\n    } catch (error) {\r\n      console.error(\"Error fetching empty seats:\", error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container-unique\">\r\n      <div className=\"chatbot-bot-intro-unique\">\r\n        <img src={chatbotImg} alt=\"chatBotprofile\" />\r\n        <p>\r\n          안녕하세요! 동국대학교 꿈의 요정 내꿈코예용~!\r\n          <br />\r\n          빈백 사용법 및 정보 등에 대해서 궁금한 내용을 질문하면 답변해드릴게요!\r\n        </p>\r\n      </div>\r\n      <div className=\"chatbot-chat-messages-unique\">\r\n        <ul id=\"chatbot-messages-unique\">\r\n          {messages.map((msg, index) => (\r\n            <li\r\n              key={index}\r\n              className={\r\n                msg.user === aiuser\r\n                  ? \"chatbot-message-left-unique\"\r\n                  : \"chatbot-message-right-unique\"\r\n              }\r\n            >\r\n              <div className=\"message-content\">\r\n                <strong className={msg.user === aiuser ? \"nickname\" : \"\"}>\r\n                  {msg.user}:\r\n                </strong>{\" \"}\r\n                {msg.text}\r\n              </div>\r\n            </li>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </ul>\r\n      </div>\r\n      <div className=\"chatbot-button-group-unique\">\r\n        <button\r\n          onClick={() =>\r\n            handleButtonClick(\r\n              \"TEXT 1\",\r\n              \"나의 공강을 책임질 빈백의 위치를 알려줘!\"\r\n            )\r\n          }\r\n        >\r\n          나의 공강을 책임질 빈백의 위치를 알려줘!\r\n        </button>\r\n        <button\r\n          onClick={() =>\r\n            handleButtonClick(\"TEXT 2\", \"빈백 운영시간은 어떻게 돼?\")\r\n          }\r\n        >\r\n          빈백 운영시간은 어떻게 돼?\r\n        </button>\r\n        <button\r\n          onClick={() =>\r\n            handleButtonClick(\r\n              \"TEXT 3\",\r\n              \"나의 완벽한 숙면을 위해 음악을 추천해줄래?\"\r\n            )\r\n          }\r\n        >\r\n          나의 완벽한 숙면을 위해 음악을 추천해줄래?\r\n        </button>\r\n        <button onClick={handleSeatsButtonClick}>\r\n          현재 예약 가능한 좌석 현황을 알려주라\r\n        </button>\r\n        <form id=\"chatbot-chatform-unique\" onSubmit={handleSubmit}>\r\n          <input\r\n            id=\"chatbot-messageinput-unique\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            autoComplete=\"off\"\r\n          />\r\n          <button type=\"submit\">\r\n            <div className=\"sendBtn\">\r\n              <img src={sendBtn} alt=\"전송 아이콘\"></img>\r\n            </div>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAO,eAAe;AACtB,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,MAAM,GAAGL,EAAE,CAAC,CAAC;AACnB,MAAMM,MAAM,GAAG,KAAK;AAEpB,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMiB,cAAc,GAAGf,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACdO,MAAM,CAACU,IAAI,CAAC,WAAW,EAAE;MAAEC,IAAI,EAAER;IAAY,CAAC,CAAC;IAE/CH,MAAM,CAACY,EAAE,CAAC,eAAe,EAAGC,IAAI,IAAK;MACnCP,WAAW,CAACO,IAAI,CAAC;MACjBC,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC;IAEFd,MAAM,CAACY,EAAE,CAAC,cAAc,EAAGG,GAAG,IAAK;MACjCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,GAAG,CAAC;MACtCT,WAAW,CAAEY,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC;IAEFf,MAAM,CAACY,EAAE,CAAC,cAAc,EAAGG,GAAG,IAAK;MACjCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC3CT,WAAW,CAAEY,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC;IAEF,OAAO,MAAM;MACXf,MAAM,CAACmB,GAAG,CAAC,cAAc,CAAC;MAC1BnB,MAAM,CAACmB,GAAG,CAAC,eAAe,CAAC;MAC3BnB,MAAM,CAACmB,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAChB,WAAW,CAAC,CAAC;EAEjBV,SAAS,CAAC,MAAM;IACdqB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,MAAMe,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIf,KAAK,EAAE;MACT;MACAP,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;QAAEa,IAAI,EAAEhB,KAAK;QAAEI,IAAI,EAAER;MAAY,CAAC,CAAC;MAE/D,IAAI;QACF,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;UACxCC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEvB;UAAM,CAAC;QAChC,CAAC,CAAC;QACF,MAAMwB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClChB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,IAAI,CAAC;;QAEtC;QACA/B,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;UAC1Ba,IAAI,EAAEQ,IAAI,CAACP,QAAQ;UACnBb,IAAI,EAAEV;QACR,CAAC,CAAC;QAEFO,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,CAAC,OAAOyB,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEZ,IAAI,KAAK;IACzCvB,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;MAAEa,IAAI;MAAEZ,IAAI,EAAER;IAAY,CAAC,CAAC;IACxDH,MAAM,CAACU,IAAI,CAAC,aAAa,EAAE;MAAEyB;IAAM,CAAC,CAAC;EACvC,CAAC;EAED,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,MAAMC,QAAQ,GAAG,uBAAuB;IACxC;IACArC,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;MAAEa,IAAI,EAAEc,QAAQ;MAAE1B,IAAI,EAAER;IAAY,CAAC,CAAC;IAElE,IAAI;MACF,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,MAAMM,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,MAAMM,cAAc,GAAGP,IAAI,CAACO,cAAc,CAAC,CAAC;MAC5C,MAAMf,IAAI,GAAG,iBAAiBe,cAAc,OAAO;MACnD;MACAtC,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;QAAEa,IAAI;QAAEZ,IAAI,EAAEV;MAAO,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOgC,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMnB,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAyB,qBAAA;IAC3B,CAAAA,qBAAA,GAAA9B,cAAc,CAAC+B,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAED,oBACE3C,OAAA;IAAK4C,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvC7C,OAAA;MAAK4C,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvC7C,OAAA;QAAK8C,GAAG,EAAEjD,UAAW;QAACkD,GAAG,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7CnD,OAAA;QAAA6C,QAAA,GAAG,2HAED,eAAA7C,OAAA;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,kMAER;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNnD,OAAA;MAAK4C,SAAS,EAAC,8BAA8B;MAAAC,QAAA,eAC3C7C,OAAA;QAAIoD,EAAE,EAAC,yBAAyB;QAAAP,QAAA,GAC7BvC,QAAQ,CAAC+C,GAAG,CAAC,CAACrC,GAAG,EAAEsC,KAAK,kBACvBtD,OAAA;UAEE4C,SAAS,EACP5B,GAAG,CAACJ,IAAI,KAAKV,MAAM,GACf,6BAA6B,GAC7B,8BACL;UAAA2C,QAAA,eAED7C,OAAA;YAAK4C,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9B7C,OAAA;cAAQ4C,SAAS,EAAE5B,GAAG,CAACJ,IAAI,KAAKV,MAAM,GAAG,UAAU,GAAG,EAAG;cAAA2C,QAAA,GACtD7B,GAAG,CAACJ,IAAI,EAAC,GACZ;YAAA;cAAAoC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAAC,GAAG,EACZnC,GAAG,CAACQ,IAAI;UAAA;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN;QAAC,GAZDG,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaR,CACL,CAAC,eACFnD,OAAA;UAAKuD,GAAG,EAAE7C;QAAe;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNnD,OAAA;MAAK4C,SAAS,EAAC,6BAA6B;MAAAC,QAAA,gBAC1C7C,OAAA;QACEwD,OAAO,EAAEA,CAAA,KACPrB,iBAAiB,CACf,QAAQ,EACR,yBACF,CACD;QAAAU,QAAA,EACF;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTnD,OAAA;QACEwD,OAAO,EAAEA,CAAA,KACPrB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAC9C;QAAAU,QAAA,EACF;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTnD,OAAA;QACEwD,OAAO,EAAEA,CAAA,KACPrB,iBAAiB,CACf,QAAQ,EACR,0BACF,CACD;QAAAU,QAAA,EACF;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTnD,OAAA;QAAQwD,OAAO,EAAEnB,sBAAuB;QAAAQ,QAAA,EAAC;MAEzC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTnD,OAAA;QAAMoD,EAAE,EAAC,yBAAyB;QAACK,QAAQ,EAAEpC,YAAa;QAAAwB,QAAA,gBACxD7C,OAAA;UACEoD,EAAE,EAAC,6BAA6B;UAChCM,KAAK,EAAElD,KAAM;UACbmD,QAAQ,EAAGrC,CAAC,IAAKb,QAAQ,CAACa,CAAC,CAACsC,MAAM,CAACF,KAAK,CAAE;UAC1CG,YAAY,EAAC;QAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,eACFnD,OAAA;UAAQ8D,IAAI,EAAC,QAAQ;UAAAjB,QAAA,eACnB7C,OAAA;YAAK4C,SAAS,EAAC,SAAS;YAAAC,QAAA,eACtB7C,OAAA;cAAK8C,GAAG,EAAEhD,OAAQ;cAACiD,GAAG,EAAC;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9C,EAAA,CAzKIF,OAAO;AAAA4D,EAAA,GAAP5D,OAAO;AA2Kb,eAAeA,OAAO;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}