{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useUserData = (initialData = {}) => {\n  _s();\n  const [name, setName] = useState(initialData.name || '');\n  const [phone_num, setPhone_num] = useState(initialData.phone_num || '');\n  const [id, setId] = useState(initialData.id || ''); // 학번으로 사용\n  const [password, setPassword] = useState(initialData.password || '');\n  const fetchUserData = async () => {\n    try {\n      // 사용자가 로그인한 후 호출 (유저정보 가져오기)\n      const response = await axios.post('/mypage', {}, {\n        withCredentials: true\n      });\n      const userData = response.data;\n      setName(userData.name || '');\n      setPhone_num(userData.phone_num || '');\n      setId(userData.id || '');\n      setPassword(userData.password || '');\n    } catch (error) {\n      console.error('사용자 데이터를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 초기 유저정보 가져옴\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n  const handleSave = async () => {\n    try {\n      const updateData = {\n        name,\n        phone_num,\n        id,\n        password\n      };\n\n      // 정보 수정 시 데이터 전달 경로\n      console.log('Sending update data:', updateData);\n      const response = await axios.post('/mypage/process/update', updateData);\n      if (response.status === 200) {\n        alert('변경사항이 저장되었습니다.');\n      } else {\n        fetchUserData(); // 변경사항 저장 후 유저정보를 다시 불러옴\n        throw new Error(response.data.message);\n      }\n    } catch (error) {\n      console.error('변경사항을 저장하는 데 오류가 발생했습니다:', error);\n      alert('변경사항을 저장하는 데 오류가 발생했습니다.');\n    }\n  };\n  return {\n    name,\n    student_num,\n    birth,\n    phone_num,\n    id,\n    password,\n    setName,\n    setStudent_num,\n    setBirth,\n    setPhone_num,\n    setId,\n    setPassword,\n    handleSave,\n    fetchUserData\n  };\n};\n_s(useUserData, \"KzN+SJAM3SKqv/hO/cn1Rtc1KDs=\");\nexport default useUserData;","map":{"version":3,"names":["React","useState","useEffect","axios","useUserData","initialData","_s","name","setName","phone_num","setPhone_num","id","setId","password","setPassword","fetchUserData","response","post","withCredentials","userData","data","error","console","handleSave","updateData","log","status","alert","Error","message","student_num","birth","setStudent_num","setBirth"],"sources":["C:/Users/가연/Desktop/Hackathon_real/Hackathon_JJIN/front-end/src/components/useUserData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useUserData = (initialData = {}) => {\r\n  const [name, setName] = useState(initialData.name || '');\r\n  const [phone_num, setPhone_num] = useState(initialData.phone_num || '');\r\n  const [id, setId] = useState(initialData.id || ''); // 학번으로 사용\r\n  const [password, setPassword] = useState(initialData.password || '');\r\n\r\n  const fetchUserData = async () => {\r\n    try {\r\n      // 사용자가 로그인한 후 호출 (유저정보 가져오기)\r\n      const response = await axios.post('/mypage', {}, { withCredentials: true });\r\n      const userData = response.data;\r\n\r\n      setName(userData.name || '');\r\n      setPhone_num(userData.phone_num || '');\r\n      setId(userData.id || '');\r\n      setPassword(userData.password || '');\r\n    } catch (error) {\r\n      console.error('사용자 데이터를 가져오는 중 오류 발생:', error);\r\n    }\r\n  };\r\n\r\n  // 초기 유저정보 가져옴\r\n  useEffect(() => {\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const updateData = {\r\n        name,\r\n\r\n        phone_num,\r\n        id,\r\n        password,\r\n      };\r\n\r\n      // 정보 수정 시 데이터 전달 경로\r\n      console.log('Sending update data:', updateData);\r\n      const response = await axios.post('/mypage/process/update', updateData);\r\n\r\n      if (response.status === 200) {\r\n        alert('변경사항이 저장되었습니다.');\r\n      } else {\r\n        fetchUserData(); // 변경사항 저장 후 유저정보를 다시 불러옴\r\n        throw new Error(response.data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('변경사항을 저장하는 데 오류가 발생했습니다:', error);\r\n      alert('변경사항을 저장하는 데 오류가 발생했습니다.');\r\n    }\r\n  };\r\n\r\n  return {\r\n    name,\r\n    student_num,\r\n    birth,\r\n    phone_num,\r\n    id,\r\n    password,\r\n    setName,\r\n    setStudent_num,\r\n    setBirth,\r\n    setPhone_num,\r\n    setId,\r\n    setPassword,\r\n    handleSave,\r\n    fetchUserData,\r\n  };\r\n};\r\n\r\nexport default useUserData;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGA,CAACC,WAAW,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAACI,WAAW,CAACE,IAAI,IAAI,EAAE,CAAC;EACxD,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAACI,WAAW,CAACI,SAAS,IAAI,EAAE,CAAC;EACvE,MAAM,CAACE,EAAE,EAAEC,KAAK,CAAC,GAAGX,QAAQ,CAACI,WAAW,CAACM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAACI,WAAW,CAACQ,QAAQ,IAAI,EAAE,CAAC;EAEpE,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;MAC3E,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,IAAI;MAE9BZ,OAAO,CAACW,QAAQ,CAACZ,IAAI,IAAI,EAAE,CAAC;MAC5BG,YAAY,CAACS,QAAQ,CAACV,SAAS,IAAI,EAAE,CAAC;MACtCG,KAAK,CAACO,QAAQ,CAACR,EAAE,IAAI,EAAE,CAAC;MACxBG,WAAW,CAACK,QAAQ,CAACN,QAAQ,IAAI,EAAE,CAAC;IACtC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACda,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,UAAU,GAAG;QACjBjB,IAAI;QAEJE,SAAS;QACTE,EAAE;QACFE;MACF,CAAC;;MAED;MACAS,OAAO,CAACG,GAAG,CAAC,sBAAsB,EAAED,UAAU,CAAC;MAC/C,MAAMR,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,wBAAwB,EAAEO,UAAU,CAAC;MAEvE,IAAIR,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;QAC3BC,KAAK,CAAC,gBAAgB,CAAC;MACzB,CAAC,MAAM;QACLZ,aAAa,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,IAAIa,KAAK,CAACZ,QAAQ,CAACI,IAAI,CAACS,OAAO,CAAC;MACxC;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDM,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;EAED,OAAO;IACLpB,IAAI;IACJuB,WAAW;IACXC,KAAK;IACLtB,SAAS;IACTE,EAAE;IACFE,QAAQ;IACRL,OAAO;IACPwB,cAAc;IACdC,QAAQ;IACRvB,YAAY;IACZE,KAAK;IACLE,WAAW;IACXS,UAAU;IACVR;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CApEIF,WAAW;AAsEjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}